From 6a3460829404d2f637344db751508b25f7a99481 Mon Sep 17 00:00:00 2001
From: David Hoppenbrouwers <david@salt-inc.org>
Date: Mon, 18 Apr 2022 14:47:25 +0200
Subject: [PATCH 20/44] Get rid of QueryHandle

---
 library/std/src/sys/norostb/fs.rs | 4 ++--
 library/std/src/sys/norostb/io.rs | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/library/std/src/sys/norostb/fs.rs b/library/std/src/sys/norostb/fs.rs
index 294e433c547..37c1c28c0dc 100644
--- a/library/std/src/sys/norostb/fs.rs
+++ b/library/std/src/sys/norostb/fs.rs
@@ -24,7 +24,7 @@
 use crate::sys_common::{AsInner, FromInner};
 use norostb_rt::kernel::{
     io::{Handle, ObjectInfo},
-    syscall::{self, QueryHandle, TableId, TableInfo},
+    syscall::{self, TableId, TableInfo},
 };
 
 #[derive(Debug)]
@@ -44,7 +44,7 @@ pub enum FileAttr {
 pub enum ReadDir {
     None,
     Tables(Option<TableId>),
-    Objects { table_id: TableId, table_info: TableInfo, query: QueryHandle },
+    Objects { table_id: TableId, table_info: TableInfo, query: Handle },
 }
 
 #[derive(Clone, Debug)]
diff --git a/library/std/src/sys/norostb/io.rs b/library/std/src/sys/norostb/io.rs
index 085f7bf5cda..f9a12a66995 100644
--- a/library/std/src/sys/norostb/io.rs
+++ b/library/std/src/sys/norostb/io.rs
@@ -154,7 +154,7 @@ pub fn create(table: syscall::TableId, path: &[u8]) -> io::Result<syscall::Handl
 /// Blocking query
 #[unstable(feature = "norostb", issue = "none")]
 #[inline]
-pub fn query(table: syscall::TableId, path: &[u8]) -> io::Result<syscall::QueryHandle> {
+pub fn query(table: syscall::TableId, path: &[u8]) -> io::Result<syscall::Handle> {
     let e = enqueue(Request::query(0, table, path));
     if e.value < 0 {
         Err(io::const_io_error!(io::ErrorKind::Uncategorized, "failed to query"))
@@ -173,7 +173,7 @@ pub fn query(table: syscall::TableId, path: &[u8]) -> io::Result<syscall::QueryH
 /// Blocking query_next
 #[unstable(feature = "norostb", issue = "none")]
 #[inline]
-pub fn query_next(query: syscall::QueryHandle, info: &mut ObjectInfo) -> io::Result<bool> {
+pub fn query_next(query: syscall::Handle, info: &mut ObjectInfo) -> io::Result<bool> {
     let e = enqueue(Request::query_next(0, query, info));
     if e.value < 0 {
         Err(io::const_io_error!(io::ErrorKind::Uncategorized, "failed to advance query"))
-- 
2.30.2

