From 2f64ad2e7cbe45d8421b19dfc4bd48c817e493ea Mon Sep 17 00:00:00 2001
From: David Hoppenbrouwers <david@salt-inc.org>
Date: Tue, 19 Apr 2022 20:58:24 +0200
Subject: [PATCH 21/45] Let kernel select virtual address for I/O queue

---
 library/std/src/sys/norostb/io.rs | 14 +++++---------
 1 file changed, 5 insertions(+), 9 deletions(-)

diff --git a/library/std/src/sys/norostb/io.rs b/library/std/src/sys/norostb/io.rs
index f9a12a66995..9f8be8bd45c 100644
--- a/library/std/src/sys/norostb/io.rs
+++ b/library/std/src/sys/norostb/io.rs
@@ -54,13 +54,10 @@ pub fn as_mut_slice(&mut self) -> &mut [u8] {
 
 thread_local! {
     static QUEUE: RefCell<Queue> = RefCell::new({
-        use crate::sync::atomic::*;
-        static ADDR: AtomicUsize = AtomicUsize::new(0x9_8765_0000);
-        let base = ADDR.fetch_add(0x1000, Ordering::Relaxed);
-        let base = syscall::create_io_queue(base as *mut _, 0, 0).unwrap();
-        let base = crate::ptr::NonNull::new(base).unwrap().cast();
         Queue {
-            base,
+            base: syscall::create_io_queue(None, 0, 0)
+                .unwrap_or_else(|e| rtabort!("failed to create io queue: {:?}", e))
+                .cast(),
             requests_mask: 0,
             responses_mask: 0,
         }
@@ -71,13 +68,12 @@ fn enqueue(request: Request) -> Response {
     QUEUE.with(|queue| unsafe {
         let mut queue = queue.borrow_mut();
         queue.enqueue_request(request).unwrap();
-        let base = queue.base.as_ptr().cast();
-        syscall::process_io_queue(base).unwrap();
+        syscall::process_io_queue(Some(queue.base.cast())).unwrap();
         loop {
             if let Ok(e) = queue.dequeue_response() {
                 break e;
             }
-            syscall::wait_io_queue(base).unwrap();
+            syscall::wait_io_queue(Some(queue.base.cast())).unwrap();
         }
     })
 }
-- 
2.30.2

